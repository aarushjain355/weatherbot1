// Generated by gencpp from file weatherbotproject/WeatherServiceRequest.msg
// DO NOT EDIT!


#ifndef WEATHERBOTPROJECT_MESSAGE_WEATHERSERVICEREQUEST_H
#define WEATHERBOTPROJECT_MESSAGE_WEATHERSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace weatherbotproject
{
template <class ContainerAllocator>
struct WeatherServiceRequest_
{
  typedef WeatherServiceRequest_<ContainerAllocator> Type;

  WeatherServiceRequest_()
    : Weather()  {
    }
  WeatherServiceRequest_(const ContainerAllocator& _alloc)
    : Weather(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Weather_type;
  _Weather_type Weather;





  typedef boost::shared_ptr< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WeatherServiceRequest_

typedef ::weatherbotproject::WeatherServiceRequest_<std::allocator<void> > WeatherServiceRequest;

typedef boost::shared_ptr< ::weatherbotproject::WeatherServiceRequest > WeatherServiceRequestPtr;
typedef boost::shared_ptr< ::weatherbotproject::WeatherServiceRequest const> WeatherServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator1> & lhs, const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Weather == rhs.Weather;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator1> & lhs, const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace weatherbotproject

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dea54388e2879333920102ba8c3fe248";
  }

  static const char* value(const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdea54388e2879333ULL;
  static const uint64_t static_value2 = 0x920102ba8c3fe248ULL;
};

template<class ContainerAllocator>
struct DataType< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "weatherbotproject/WeatherServiceRequest";
  }

  static const char* value(const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Weather\n"
;
  }

  static const char* value(const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Weather);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WeatherServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::weatherbotproject::WeatherServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "Weather: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Weather);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEATHERBOTPROJECT_MESSAGE_WEATHERSERVICEREQUEST_H
